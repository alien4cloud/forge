tosca_definitions_version: alien_dsl_2_0_0
#
# Copyright 2018 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


metadata:
  template_name: org.ystia.yorc.linux.ansible
  template_version: 2.2.0-SNAPSHOT
  template_author: yorc

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - yorc-types:1.0.0
  - org.ystia.yorc.pub:2.2.0-SNAPSHOT
  - org.ystia.yorc.experimental.consul.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.statsd.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.grafana.pub:2.2.0-SNAPSHOT

node_types:
  org.ystia.yorc.infrastructure.GoogleConfig:
    derived_from: org.ystia.yorc.pub.infrastructure.GoogleConfig
    requirements:
    - host:
        capability: org.ystia.yorc.pub.capabilities.YorcConfigContainer
        relationship: org.ystia.yorc.linux.ansible.relationships.YorcConfigGoogleHostedOnYorc
        occurrences: [ 1, 1 ]

  org.ystia.yorc.infrastructure.OpenStackConfig:
    derived_from: org.ystia.yorc.pub.infrastructure.OpenStackConfig
    requirements:
    - host:
        capability: org.ystia.yorc.pub.capabilities.YorcConfigContainer
        relationship: org.ystia.yorc.linux.ansible.relationships.YorcConfigOpenstackHostedOnYorc
        occurrences: [ 1, 1 ]

  org.ystia.yorc.infrastructure.AWSConfig:
    derived_from: org.ystia.yorc.pub.infrastructure.AWSConfig
    requirements:
    - host:
        capability: org.ystia.yorc.pub.capabilities.YorcConfigContainer
        relationship: org.ystia.yorc.linux.ansible.relationships.YorcConfigAWSHostedOnYorc
        occurrences: [ 1, 1 ]

  org.ystia.yorc.infrastructure.KubernetesConfig:
    derived_from: org.ystia.yorc.pub.infrastructure.KubernetesConfig
    requirements:
    - host:
        capability: org.ystia.yorc.pub.capabilities.YorcConfigContainer
        relationship: org.ystia.yorc.linux.ansible.relationships.YorcConfigKubernetesHostedOnYorc
        occurrences: [ 1, 1 ]

  org.ystia.yorc.infrastructure.HostsPoolConfig:
    derived_from: org.ystia.yorc.pub.infrastructure.HostsPoolConfig
    interfaces:
      Standard:
        start:
          inputs:
            YORC_CONFIG_DIR: { get_property: [REQ_TARGET, yorc, config_dir] }
            YORC_INSTALL_DIR: { get_property: [REQ_TARGET, yorc, install_dir] }
          implementation: playbooks/apply_hostspool.yml
    requirements:
      - yorc:
          capability: org.ystia.yorc.pub.capabilities.YorcConfigContainer
          relationship: org.ystia.yorc.linux.ansible.relationships.YorcConfigHostsPoolHostedOnYorc

  org.ystia.yorc.linux.ansible.nodes.YorcServer:
    derived_from: org.ystia.yorc.pub.nodes.YorcServer
    description: Yorc server instance
    metadata:
      icon: "yorcicon.png"
    properties:
      log_dir:
        type: string
        required: true
        default: "/var/log/yorc"
      ansible_use_openssh:
        description: |
          Prefer OpenSSH over Paramiko a Python implementation of SSH (the default) to provision remote hosts.
          OpenSSH have several optimization like reusing connections that should improve preformance but may lead to issues on older systems.
        type: boolean
        required: true
        default: true
      ansible_connection_retries:
        description: |
          Number of retries in case of Ansible SSH connection failure.
        type: integer
        required: true
        default: 3
      ansible_hosted_operations_unsandboxed_operations_allowed:
        description: |
          This option control if operations can be executed directly on the system that hosts Yorc if no default sandbox is defined.
          This is not permitted by default.
        type: boolean
        required: true
        default: false
      resources_prefix:
        type: string
        description: |
          Specify a prefix that will be used for names when creating resources such as Compute instances or volumes.
        required: true
        default: "yorc-"
    interfaces:
      Standard:
        inputs:
          CONFIG_DIR: { get_property: [SELF, config_dir] }
          INSTALL_DIR: { get_property: [SELF, install_dir] }
          DATA_DIR: { get_property: [SELF, data_dir] }
          LOG_DIR: { get_property: [SELF, log_dir] }
        create:
          inputs:
            DOWNLOAD_URL: { get_property: [SELF, download_url] }
          implementation: playbooks/create.yml
        configure:
          inputs:
            REST_API_PORT: { get_property: [SELF, rest, port] }
            REST_API_PROTOCOL: { get_property: [SELF, rest, protocol] }
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            PUBLIC_ADDRESS: { get_attribute: [HOST, public_address] }
            WORKERS_NUMBER: { get_property: [SELF, workers_number] }
            RESOURCES_PREFIX: { get_property: [SELF, resources_prefix] }
            ANSIBLE_USE_OPENSSH: { get_property: [SELF, ansible_use_openssh] }
            ANSIBLE_CONNECTION_RETRIES: { get_property: [SELF, ansible_connection_retries] }
            ANSIBLE_HOSTED_OPERATIONS_UNSANDBOXED_OPERATIONS_ALLOWED: { get_property: [SELF, ansible_hosted_operations_unsandboxed_operations_allowed] }
            SSH_KEY: { get_property: [SELF, private_key_content] }
            CA_PEM: { get_property: [SELF, ca_pem] }
            CA_KEY: { get_property: [SELF, ca_key] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
          implementation: playbooks/configure.yml
        start: playbooks/start.yml
        stop: playbooks/stop.yml
        delete: playbooks/delete.yml
    requirements:
      - consul:
          capability: org.alien4cloud.consul.pub.capabilities.ConsulAgent
          # Override parent requirement relationship
          relationship: org.ystia.yorc.linux.ansible.relationships.JoinConsulAgent
          occurrences: [ 1, 1 ]
      - work_directory:
          capability: tosca.capabilities.Node
          relationship: org.ystia.yorc.linux.ansible.relationships.DependsOnFilessystem
          occurrences: [0,1]
      - terraform:
          capability: tosca.capabilities.Node
          relationship: org.ystia.yorc.linux.ansible.relationships.DependsOnTerraformRuntime
          occurrences: [ 1, 1 ]
      - statsd:
          capability: org.alien4cloud.statsd.pub.capabilities.StatsdEndpoint
          relationship: org.ystia.yorc.linux.ansible.relationships.ConnectsToStatsd
          occurrences: [ 0, 1 ]

relationship_types:
  org.ystia.yorc.linux.ansible.relationships.JoinConsulAgent:
    derived_from: org.ystia.yorc.pub.relationships.JoinConsulAgent
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            CONSUL_PORT: { get_property: [TARGET, consul_agent, port] }
            TLS_ENABLED: { get_property: [TARGET, tls_enabled] }
            CONSUL_CONFIG_DIR: { get_property: [TARGET, config_dir] }
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
          implementation: playbooks/join_consul.yml
  org.ystia.yorc.linux.ansible.relationships.DependsOnFilessystem:
    derived_from: tosca.relationships.DependsOn
    description: >
      Connects Yorc to a FileSystem (BlockStorage, NFS...)
    valid_target_types: [ alien.nodes.LinuxFileSystem ]
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            DIRECTORY: { get_property: [TARGET, location] }
          implementation: playbooks/configure_filesystem.yml
  org.ystia.yorc.linux.ansible.relationships.DependsOnTerraformRuntime:
    derived_from: org.ystia.terraform.pub.relationships.DependsOnTerraformRuntime
    description: >
      Yorc depends on Terraform runtime
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            PLUGINS_DIR: { get_property: [TARGET, plugins_dir] }
          implementation: playbooks/configure_terraform.yml
  org.ystia.yorc.linux.ansible.relationships.YorcConfigGoogleHostedOnYorc:
    derived_from: tosca.relationships.HostedOn
    description: >
      Configure a Yorc server with a Google Compute Engine infrastructure
    valid_target_types: [ org.ystia.yorc.pub.nodes.YorcServer ]
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            CONFIG_DIR: { get_property: [TARGET, config_dir] }
            PROJECT: { get_property: [SOURCE, project] }
            REGION: { get_property: [SOURCE, region] }
            CREDENTIALS: { get_property: [SOURCE, credentials] }
          implementation: playbooks/configure_google.yml
  org.ystia.yorc.linux.ansible.relationships.YorcConfigOpenstackHostedOnYorc:
    derived_from: tosca.relationships.HostedOn
    description: >
      Configure a Yorc server with an openstack infrastructure
    valid_target_types: [ org.ystia.yorc.pub.nodes.YorcServer ]
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            DATA_DIR: { get_property: [SOURCE, data_dir] }
            AUTH_URL: { get_property: [SOURCE, auth_url] }
            TENANT_NAME: { get_property: [SOURCE, tenant_name] }
            USER_NAME: { get_property: [SOURCE, user_name] }
            PASSWORD: { get_property: [SOURCE, password] }
            PRIVATE_NETWORK_NAME: { get_property: [SOURCE, private_network_name] }
            DEFAULT_SECURITY_GROUPS: { get_property: [SOURCE, default_security_groups] }
          implementation: playbooks/configure_openstack.yml

  org.ystia.yorc.linux.ansible.relationships.YorcConfigKubernetesHostedOnYorc:
    derived_from: tosca.relationships.HostedOn
    description: >
      Configure a Yorc server with a kubernetes infrastructure
    valid_target_types: [ org.ystia.yorc.pub.nodes.YorcServer ]
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            MASTER_URL: { get_property: [SOURCE, master_url] }
            CA: { get_property: [SOURCE, ca] }
            CERT: { get_property: [SOURCE, cert] }
            KEY: { get_property: [SOURCE, key] }
            INSECURE: { get_property: [SOURCE, insecure] }
          implementation: playbooks/configure_kubernetes.yml

  org.ystia.yorc.linux.ansible.relationships.YorcConfigAWSHostedOnYorc:
    derived_from: tosca.relationships.HostedOn
    description: >
      Configure a Yorc server with an aws infrastructure
    valid_target_types: [ org.ystia.yorc.pub.nodes.YorcServer ]
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            ACCESS_KEY: { get_property: [SOURCE, access_key] }
            SECRET_KEY: { get_property: [SOURCE, secret_key] }
            REGION: { get_property: [SOURCE, region] }
          implementation: playbooks/configure_aws.yml

  org.ystia.yorc.linux.ansible.relationships.YorcConfigHostsPoolHostedOnYorc:
    derived_from: org.ystia.yorc.pub.relationships.YorcConfigHostedOnYorc
    description: >
      Create a Hosts Pool configuration
    interfaces:
      Configure:
        post_configure_target:
          inputs:
            CONFIG_DIR: { get_property: [TARGET, config_dir] }
            DATA_DIR: { get_property: [TARGET, data_dir] }
            HOSTS_POOL: { get_property: [SOURCE, hosts] }
          implementation: playbooks/configure_hostspool.yml

  org.ystia.yorc.linux.ansible.relationships.ConnectsToStatsd:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      When Yorc is connected to statsd, we fill it's telemetry configuration
    interfaces:
      Configure:
        post_configure_source:
          inputs:
            CONFIG_DIR: { get_property: [SOURCE, config_dir] }
            STATSD_IP_ADDRESS: { get_attribute: [TARGET, statsd_endpoint, ip_address] }
            STATSD_IP_PORT: { get_attribute: [TARGET, statsd_endpoint, port] }
          implementation: playbooks/configure_telemetry_statsd.yml
